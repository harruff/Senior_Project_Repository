// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marineScv.proto

#include "marineScv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_marineScv_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_marineScv_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Action;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_marineScv_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TerrainInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_marineScv_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TypeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_marineScv_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_State;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_marineScv_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UInfo;
}  // namespace protobuf_marineScv_2eproto
namespace Message {
namespace MarineScv {
class TypeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TypeInfo>
      _instance;
} _TypeInfo_default_instance_;
class TerrainInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TerrainInfo>
      _instance;
} _TerrainInfo_default_instance_;
class UInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UInfo>
      _instance;
} _UInfo_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action>
      _instance;
} _Action_default_instance_;
class InitReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitReq>
      _instance;
} _InitReq_default_instance_;
class InitResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitRes>
      _instance;
} _InitRes_default_instance_;
class StepReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StepReq>
      _instance;
} _StepReq_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State>
      _instance;
} _State_default_instance_;
class StepResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StepRes>
      _instance;
} _StepRes_default_instance_;
class ResetReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetReq>
      _instance;
} _ResetReq_default_instance_;
class ResetResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetRes>
      _instance;
} _ResetRes_default_instance_;
class CreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Create>
      _instance;
} _Create_default_instance_;
class CloseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Close>
      _instance;
} _Close_default_instance_;
}  // namespace MarineScv
}  // namespace Message
namespace protobuf_marineScv_2eproto {
static void InitDefaultsTypeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_TypeInfo_default_instance_;
    new (ptr) ::Message::MarineScv::TypeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::TypeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TypeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTypeInfo}, {}};

static void InitDefaultsTerrainInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_TerrainInfo_default_instance_;
    new (ptr) ::Message::MarineScv::TerrainInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::TerrainInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TerrainInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTerrainInfo}, {}};

static void InitDefaultsUInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_UInfo_default_instance_;
    new (ptr) ::Message::MarineScv::UInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::UInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUInfo}, {
      &protobuf_marineScv_2eproto::scc_info_TerrainInfo.base,}};

static void InitDefaultsAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_Action_default_instance_;
    new (ptr) ::Message::MarineScv::Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::Action::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Action =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAction}, {}};

static void InitDefaultsInitReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_InitReq_default_instance_;
    new (ptr) ::Message::MarineScv::InitReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::InitReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitReq}, {}};

static void InitDefaultsInitRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_InitRes_default_instance_;
    new (ptr) ::Message::MarineScv::InitRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::InitRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InitRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInitRes}, {
      &protobuf_marineScv_2eproto::scc_info_TypeInfo.base,}};

static void InitDefaultsStepReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_StepReq_default_instance_;
    new (ptr) ::Message::MarineScv::StepReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::StepReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StepReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStepReq}, {
      &protobuf_marineScv_2eproto::scc_info_Action.base,}};

static void InitDefaultsState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_State_default_instance_;
    new (ptr) ::Message::MarineScv::State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::State::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_State =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsState}, {
      &protobuf_marineScv_2eproto::scc_info_UInfo.base,}};

static void InitDefaultsStepRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_StepRes_default_instance_;
    new (ptr) ::Message::MarineScv::StepRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::StepRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StepRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStepRes}, {
      &protobuf_marineScv_2eproto::scc_info_State.base,}};

static void InitDefaultsResetReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_ResetReq_default_instance_;
    new (ptr) ::Message::MarineScv::ResetReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::ResetReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResetReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResetReq}, {}};

static void InitDefaultsResetRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_ResetRes_default_instance_;
    new (ptr) ::Message::MarineScv::ResetRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::ResetRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResetRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResetRes}, {
      &protobuf_marineScv_2eproto::scc_info_State.base,}};

static void InitDefaultsCreate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_Create_default_instance_;
    new (ptr) ::Message::MarineScv::Create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::Create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Create =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreate}, {}};

static void InitDefaultsClose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::MarineScv::_Close_default_instance_;
    new (ptr) ::Message::MarineScv::Close();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::MarineScv::Close::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Close =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClose}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TypeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TerrainInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitRes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StepReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StepRes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResetReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResetRes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Create.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Close.base);
}

::google::protobuf::Metadata file_level_metadata[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, hp_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, shield_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, energy_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, armor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, cooldown_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, top_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, damage_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, damage_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, weapon_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, sight_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TypeInfo, seek_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, nearest_obstacle_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_int_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_int_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_int_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_int_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_double_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_double_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_double_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_double_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_bool_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_bool_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_bool_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::TerrainInfo, udi_bool_4_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, shield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, accelerating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, braking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, attacking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, is_attack_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::UInfo, pos_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Action, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Action, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Action, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Action, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Action, action_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitReq, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitReq, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitReq, frames_per_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitReq, move_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitReq, move_dist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitRes, num_action_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitRes, my_marine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitRes, my_scv_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitRes, en_unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::InitRes, iswalkable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::StepReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::StepReq, action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::State, my_marine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::State, my_scv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::State, en_unit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::StepRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::StepRes, done_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::StepRes, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::StepRes, next_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::ResetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::ResetReq, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::ResetRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::ResetRes, next_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Create, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Close, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message::MarineScv::Close, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Message::MarineScv::TypeInfo)},
  { 17, -1, sizeof(::Message::MarineScv::TerrainInfo)},
  { 35, -1, sizeof(::Message::MarineScv::UInfo)},
  { 54, -1, sizeof(::Message::MarineScv::Action)},
  { 64, -1, sizeof(::Message::MarineScv::InitReq)},
  { 75, -1, sizeof(::Message::MarineScv::InitRes)},
  { 85, -1, sizeof(::Message::MarineScv::StepReq)},
  { 91, -1, sizeof(::Message::MarineScv::State)},
  { 99, -1, sizeof(::Message::MarineScv::StepRes)},
  { 107, -1, sizeof(::Message::MarineScv::ResetReq)},
  { 113, -1, sizeof(::Message::MarineScv::ResetRes)},
  { 119, -1, sizeof(::Message::MarineScv::Create)},
  { 125, -1, sizeof(::Message::MarineScv::Close)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_TypeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_TerrainInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_UInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_InitReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_InitRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_StepReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_StepRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_ResetReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_ResetRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_Create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::MarineScv::_Close_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "marineScv.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017marineScv.proto\022\021Message.MarineScv\"\375\001\n"
      "\010TypeInfo\022\016\n\006hp_max\030\001 \001(\005\022\022\n\nshield_max\030"
      "\002 \001(\005\022\022\n\nenergy_max\030\003 \001(\005\022\r\n\005armor\030\004 \001(\005"
      "\022\024\n\014cooldown_max\030\005 \001(\005\022\024\n\014acceleration\030\006"
      " \001(\005\022\021\n\ttop_speed\030\007 \001(\001\022\025\n\rdamage_amount"
      "\030\010 \001(\005\022\025\n\rdamage_factor\030\t \001(\005\022\024\n\014weapon_"
      "range\030\n \001(\005\022\023\n\013sight_range\030\013 \001(\005\022\022\n\nseek"
      "_range\030\014 \001(\005\"\240\002\n\013TerrainInfo\022\035\n\025nearest_"
      "obstacle_dist\030\001 \001(\005\022\021\n\tudi_int_1\030\002 \001(\005\022\021"
      "\n\tudi_int_2\030\003 \001(\005\022\021\n\tudi_int_3\030\004 \001(\005\022\021\n\t"
      "udi_int_4\030\005 \001(\005\022\024\n\014udi_double_1\030\006 \001(\001\022\024\n"
      "\014udi_double_2\030\007 \001(\001\022\024\n\014udi_double_3\030\010 \001("
      "\001\022\024\n\014udi_double_4\030\t \001(\001\022\022\n\nudi_bool_1\030\n "
      "\001(\010\022\022\n\nudi_bool_2\030\013 \001(\010\022\022\n\nudi_bool_3\030\014 "
      "\001(\010\022\022\n\nudi_bool_4\030\r \001(\010\"\237\002\n\005UInfo\022\n\n\002hp\030"
      "\001 \001(\005\022\016\n\006shield\030\002 \001(\005\022\016\n\006energy\030\003 \001(\005\022\020\n"
      "\010cooldown\030\004 \001(\005\022\r\n\005pos_x\030\005 \001(\005\022\r\n\005pos_y\030"
      "\006 \001(\005\022\022\n\nvelocity_x\030\007 \001(\001\022\022\n\nvelocity_y\030"
      "\010 \001(\001\022\r\n\005angle\030\t \001(\001\022\024\n\014accelerating\030\n \001"
      "(\010\022\017\n\007braking\030\013 \001(\010\022\021\n\tattacking\030\014 \001(\010\022\027"
      "\n\017is_attack_frame\030\r \001(\010\0220\n\010pos_info\030\016 \003("
      "\0132\036.Message.MarineScv.TerrainInfo\"Y\n\006Act"
      "ion\022\r\n\005pos_x\030\001 \001(\005\022\r\n\005pos_y\030\002 \001(\005\022\016\n\006rad"
      "ius\030\003 \001(\005\022\r\n\005angle\030\004 \001(\002\022\022\n\naction_num\030\005"
      " \001(\005\"\200\001\n\007InitReq\022\017\n\007content\030\001 \001(\t\022\023\n\013act"
      "ion_type\030\002 \001(\005\022\017\n\007version\030\003 \001(\005\022\027\n\017frame"
      "s_per_step\030\004 \001(\005\022\022\n\nmove_angle\030\005 \001(\005\022\021\n\t"
      "move_dist\030\006 \001(\005\"\321\001\n\007InitRes\022\030\n\020num_actio"
      "n_space\030\001 \001(\005\0223\n\016my_marine_type\030\002 \001(\0132\033."
      "Message.MarineScv.TypeInfo\0220\n\013my_scv_typ"
      "e\030\003 \001(\0132\033.Message.MarineScv.TypeInfo\0221\n\014"
      "en_unit_type\030\004 \001(\0132\033.Message.MarineScv.T"
      "ypeInfo\022\022\n\niswalkable\030\005 \003(\010\"4\n\007StepReq\022)"
      "\n\006action\030\001 \003(\0132\031.Message.MarineScv.Actio"
      "n\"\211\001\n\005State\022+\n\tmy_marine\030\001 \003(\0132\030.Message"
      ".MarineScv.UInfo\022(\n\006my_scv\030\002 \003(\0132\030.Messa"
      "ge.MarineScv.UInfo\022)\n\007en_unit\030\003 \003(\0132\030.Me"
      "ssage.MarineScv.UInfo\"U\n\007StepRes\022\014\n\004done"
      "\030\001 \001(\005\022\016\n\006reward\030\002 \001(\002\022,\n\nnext_state\030\003 \001"
      "(\0132\030.Message.MarineScv.State\"\033\n\010ResetReq"
      "\022\017\n\007content\030\001 \001(\t\"8\n\010ResetRes\022,\n\nnext_st"
      "ate\030\001 \001(\0132\030.Message.MarineScv.State\"\031\n\006C"
      "reate\022\017\n\007content\030\001 \001(\t\"\030\n\005Close\022\017\n\007conte"
      "nt\030\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marineScv.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_marineScv_2eproto
namespace Message {
namespace MarineScv {

// ===================================================================

void TypeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeInfo::kHpMaxFieldNumber;
const int TypeInfo::kShieldMaxFieldNumber;
const int TypeInfo::kEnergyMaxFieldNumber;
const int TypeInfo::kArmorFieldNumber;
const int TypeInfo::kCooldownMaxFieldNumber;
const int TypeInfo::kAccelerationFieldNumber;
const int TypeInfo::kTopSpeedFieldNumber;
const int TypeInfo::kDamageAmountFieldNumber;
const int TypeInfo::kDamageFactorFieldNumber;
const int TypeInfo::kWeaponRangeFieldNumber;
const int TypeInfo::kSightRangeFieldNumber;
const int TypeInfo::kSeekRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeInfo::TypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_TypeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.TypeInfo)
}
TypeInfo::TypeInfo(const TypeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hp_max_, &from.hp_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&seek_range_) -
    reinterpret_cast<char*>(&hp_max_)) + sizeof(seek_range_));
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.TypeInfo)
}

void TypeInfo::SharedCtor() {
  ::memset(&hp_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seek_range_) -
      reinterpret_cast<char*>(&hp_max_)) + sizeof(seek_range_));
}

TypeInfo::~TypeInfo() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.TypeInfo)
  SharedDtor();
}

void TypeInfo::SharedDtor() {
}

void TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TypeInfo::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TypeInfo& TypeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_TypeInfo.base);
  return *internal_default_instance();
}


void TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hp_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seek_range_) -
      reinterpret_cast<char*>(&hp_max_)) + sizeof(seek_range_));
  _internal_metadata_.Clear();
}

bool TypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.TypeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 hp_max = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shield_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shield_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 energy_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 armor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cooldown_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooldown_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 acceleration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double top_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage_amount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage_factor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 weapon_range = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sight_range = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sight_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seek_range = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seek_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.TypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.TypeInfo)
  return false;
#undef DO_
}

void TypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hp_max = 1;
  if (this->hp_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp_max(), output);
  }

  // int32 shield_max = 2;
  if (this->shield_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shield_max(), output);
  }

  // int32 energy_max = 3;
  if (this->energy_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->energy_max(), output);
  }

  // int32 armor = 4;
  if (this->armor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->armor(), output);
  }

  // int32 cooldown_max = 5;
  if (this->cooldown_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cooldown_max(), output);
  }

  // int32 acceleration = 6;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->acceleration(), output);
  }

  // double top_speed = 7;
  if (this->top_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->top_speed(), output);
  }

  // int32 damage_amount = 8;
  if (this->damage_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->damage_amount(), output);
  }

  // int32 damage_factor = 9;
  if (this->damage_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->damage_factor(), output);
  }

  // int32 weapon_range = 10;
  if (this->weapon_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->weapon_range(), output);
  }

  // int32 sight_range = 11;
  if (this->sight_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sight_range(), output);
  }

  // int32 seek_range = 12;
  if (this->seek_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->seek_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.TypeInfo)
}

::google::protobuf::uint8* TypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.TypeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hp_max = 1;
  if (this->hp_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp_max(), target);
  }

  // int32 shield_max = 2;
  if (this->shield_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shield_max(), target);
  }

  // int32 energy_max = 3;
  if (this->energy_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->energy_max(), target);
  }

  // int32 armor = 4;
  if (this->armor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->armor(), target);
  }

  // int32 cooldown_max = 5;
  if (this->cooldown_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cooldown_max(), target);
  }

  // int32 acceleration = 6;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->acceleration(), target);
  }

  // double top_speed = 7;
  if (this->top_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->top_speed(), target);
  }

  // int32 damage_amount = 8;
  if (this->damage_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->damage_amount(), target);
  }

  // int32 damage_factor = 9;
  if (this->damage_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->damage_factor(), target);
  }

  // int32 weapon_range = 10;
  if (this->weapon_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->weapon_range(), target);
  }

  // int32 sight_range = 11;
  if (this->sight_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sight_range(), target);
  }

  // int32 seek_range = 12;
  if (this->seek_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->seek_range(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.TypeInfo)
  return target;
}

size_t TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.TypeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 hp_max = 1;
  if (this->hp_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp_max());
  }

  // int32 shield_max = 2;
  if (this->shield_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shield_max());
  }

  // int32 energy_max = 3;
  if (this->energy_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->energy_max());
  }

  // int32 armor = 4;
  if (this->armor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->armor());
  }

  // int32 cooldown_max = 5;
  if (this->cooldown_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cooldown_max());
  }

  // int32 acceleration = 6;
  if (this->acceleration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acceleration());
  }

  // double top_speed = 7;
  if (this->top_speed() != 0) {
    total_size += 1 + 8;
  }

  // int32 damage_amount = 8;
  if (this->damage_amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage_amount());
  }

  // int32 damage_factor = 9;
  if (this->damage_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage_factor());
  }

  // int32 weapon_range = 10;
  if (this->weapon_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weapon_range());
  }

  // int32 sight_range = 11;
  if (this->sight_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sight_range());
  }

  // int32 seek_range = 12;
  if (this->seek_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seek_range());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.TypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.TypeInfo)
    MergeFrom(*source);
  }
}

void TypeInfo::MergeFrom(const TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hp_max() != 0) {
    set_hp_max(from.hp_max());
  }
  if (from.shield_max() != 0) {
    set_shield_max(from.shield_max());
  }
  if (from.energy_max() != 0) {
    set_energy_max(from.energy_max());
  }
  if (from.armor() != 0) {
    set_armor(from.armor());
  }
  if (from.cooldown_max() != 0) {
    set_cooldown_max(from.cooldown_max());
  }
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
  if (from.top_speed() != 0) {
    set_top_speed(from.top_speed());
  }
  if (from.damage_amount() != 0) {
    set_damage_amount(from.damage_amount());
  }
  if (from.damage_factor() != 0) {
    set_damage_factor(from.damage_factor());
  }
  if (from.weapon_range() != 0) {
    set_weapon_range(from.weapon_range());
  }
  if (from.sight_range() != 0) {
    set_sight_range(from.sight_range());
  }
  if (from.seek_range() != 0) {
    set_seek_range(from.seek_range());
  }
}

void TypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeInfo::CopyFrom(const TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeInfo::IsInitialized() const {
  return true;
}

void TypeInfo::Swap(TypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeInfo::InternalSwap(TypeInfo* other) {
  using std::swap;
  swap(hp_max_, other->hp_max_);
  swap(shield_max_, other->shield_max_);
  swap(energy_max_, other->energy_max_);
  swap(armor_, other->armor_);
  swap(cooldown_max_, other->cooldown_max_);
  swap(acceleration_, other->acceleration_);
  swap(top_speed_, other->top_speed_);
  swap(damage_amount_, other->damage_amount_);
  swap(damage_factor_, other->damage_factor_);
  swap(weapon_range_, other->weapon_range_);
  swap(sight_range_, other->sight_range_);
  swap(seek_range_, other->seek_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TypeInfo::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TerrainInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TerrainInfo::kNearestObstacleDistFieldNumber;
const int TerrainInfo::kUdiInt1FieldNumber;
const int TerrainInfo::kUdiInt2FieldNumber;
const int TerrainInfo::kUdiInt3FieldNumber;
const int TerrainInfo::kUdiInt4FieldNumber;
const int TerrainInfo::kUdiDouble1FieldNumber;
const int TerrainInfo::kUdiDouble2FieldNumber;
const int TerrainInfo::kUdiDouble3FieldNumber;
const int TerrainInfo::kUdiDouble4FieldNumber;
const int TerrainInfo::kUdiBool1FieldNumber;
const int TerrainInfo::kUdiBool2FieldNumber;
const int TerrainInfo::kUdiBool3FieldNumber;
const int TerrainInfo::kUdiBool4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TerrainInfo::TerrainInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_TerrainInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.TerrainInfo)
}
TerrainInfo::TerrainInfo(const TerrainInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nearest_obstacle_dist_, &from.nearest_obstacle_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&udi_bool_4_) -
    reinterpret_cast<char*>(&nearest_obstacle_dist_)) + sizeof(udi_bool_4_));
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.TerrainInfo)
}

void TerrainInfo::SharedCtor() {
  ::memset(&nearest_obstacle_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udi_bool_4_) -
      reinterpret_cast<char*>(&nearest_obstacle_dist_)) + sizeof(udi_bool_4_));
}

TerrainInfo::~TerrainInfo() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.TerrainInfo)
  SharedDtor();
}

void TerrainInfo::SharedDtor() {
}

void TerrainInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TerrainInfo::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TerrainInfo& TerrainInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_TerrainInfo.base);
  return *internal_default_instance();
}


void TerrainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.TerrainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nearest_obstacle_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udi_bool_4_) -
      reinterpret_cast<char*>(&nearest_obstacle_dist_)) + sizeof(udi_bool_4_));
  _internal_metadata_.Clear();
}

bool TerrainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.TerrainInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nearest_obstacle_dist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nearest_obstacle_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 udi_int_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udi_int_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 udi_int_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udi_int_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 udi_int_3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udi_int_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 udi_int_4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udi_int_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double udi_double_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &udi_double_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double udi_double_2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &udi_double_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double udi_double_3 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &udi_double_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double udi_double_4 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &udi_double_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool udi_bool_1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &udi_bool_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool udi_bool_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &udi_bool_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool udi_bool_3 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &udi_bool_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool udi_bool_4 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &udi_bool_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.TerrainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.TerrainInfo)
  return false;
#undef DO_
}

void TerrainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.TerrainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nearest_obstacle_dist = 1;
  if (this->nearest_obstacle_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nearest_obstacle_dist(), output);
  }

  // int32 udi_int_1 = 2;
  if (this->udi_int_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->udi_int_1(), output);
  }

  // int32 udi_int_2 = 3;
  if (this->udi_int_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->udi_int_2(), output);
  }

  // int32 udi_int_3 = 4;
  if (this->udi_int_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->udi_int_3(), output);
  }

  // int32 udi_int_4 = 5;
  if (this->udi_int_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->udi_int_4(), output);
  }

  // double udi_double_1 = 6;
  if (this->udi_double_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->udi_double_1(), output);
  }

  // double udi_double_2 = 7;
  if (this->udi_double_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->udi_double_2(), output);
  }

  // double udi_double_3 = 8;
  if (this->udi_double_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->udi_double_3(), output);
  }

  // double udi_double_4 = 9;
  if (this->udi_double_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->udi_double_4(), output);
  }

  // bool udi_bool_1 = 10;
  if (this->udi_bool_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->udi_bool_1(), output);
  }

  // bool udi_bool_2 = 11;
  if (this->udi_bool_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->udi_bool_2(), output);
  }

  // bool udi_bool_3 = 12;
  if (this->udi_bool_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->udi_bool_3(), output);
  }

  // bool udi_bool_4 = 13;
  if (this->udi_bool_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->udi_bool_4(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.TerrainInfo)
}

::google::protobuf::uint8* TerrainInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.TerrainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nearest_obstacle_dist = 1;
  if (this->nearest_obstacle_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nearest_obstacle_dist(), target);
  }

  // int32 udi_int_1 = 2;
  if (this->udi_int_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->udi_int_1(), target);
  }

  // int32 udi_int_2 = 3;
  if (this->udi_int_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->udi_int_2(), target);
  }

  // int32 udi_int_3 = 4;
  if (this->udi_int_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->udi_int_3(), target);
  }

  // int32 udi_int_4 = 5;
  if (this->udi_int_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->udi_int_4(), target);
  }

  // double udi_double_1 = 6;
  if (this->udi_double_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->udi_double_1(), target);
  }

  // double udi_double_2 = 7;
  if (this->udi_double_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->udi_double_2(), target);
  }

  // double udi_double_3 = 8;
  if (this->udi_double_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->udi_double_3(), target);
  }

  // double udi_double_4 = 9;
  if (this->udi_double_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->udi_double_4(), target);
  }

  // bool udi_bool_1 = 10;
  if (this->udi_bool_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->udi_bool_1(), target);
  }

  // bool udi_bool_2 = 11;
  if (this->udi_bool_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->udi_bool_2(), target);
  }

  // bool udi_bool_3 = 12;
  if (this->udi_bool_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->udi_bool_3(), target);
  }

  // bool udi_bool_4 = 13;
  if (this->udi_bool_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->udi_bool_4(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.TerrainInfo)
  return target;
}

size_t TerrainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.TerrainInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 nearest_obstacle_dist = 1;
  if (this->nearest_obstacle_dist() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nearest_obstacle_dist());
  }

  // int32 udi_int_1 = 2;
  if (this->udi_int_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udi_int_1());
  }

  // int32 udi_int_2 = 3;
  if (this->udi_int_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udi_int_2());
  }

  // int32 udi_int_3 = 4;
  if (this->udi_int_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udi_int_3());
  }

  // double udi_double_1 = 6;
  if (this->udi_double_1() != 0) {
    total_size += 1 + 8;
  }

  // double udi_double_2 = 7;
  if (this->udi_double_2() != 0) {
    total_size += 1 + 8;
  }

  // double udi_double_3 = 8;
  if (this->udi_double_3() != 0) {
    total_size += 1 + 8;
  }

  // double udi_double_4 = 9;
  if (this->udi_double_4() != 0) {
    total_size += 1 + 8;
  }

  // int32 udi_int_4 = 5;
  if (this->udi_int_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udi_int_4());
  }

  // bool udi_bool_1 = 10;
  if (this->udi_bool_1() != 0) {
    total_size += 1 + 1;
  }

  // bool udi_bool_2 = 11;
  if (this->udi_bool_2() != 0) {
    total_size += 1 + 1;
  }

  // bool udi_bool_3 = 12;
  if (this->udi_bool_3() != 0) {
    total_size += 1 + 1;
  }

  // bool udi_bool_4 = 13;
  if (this->udi_bool_4() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerrainInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.TerrainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TerrainInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TerrainInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.TerrainInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.TerrainInfo)
    MergeFrom(*source);
  }
}

void TerrainInfo::MergeFrom(const TerrainInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.TerrainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nearest_obstacle_dist() != 0) {
    set_nearest_obstacle_dist(from.nearest_obstacle_dist());
  }
  if (from.udi_int_1() != 0) {
    set_udi_int_1(from.udi_int_1());
  }
  if (from.udi_int_2() != 0) {
    set_udi_int_2(from.udi_int_2());
  }
  if (from.udi_int_3() != 0) {
    set_udi_int_3(from.udi_int_3());
  }
  if (from.udi_double_1() != 0) {
    set_udi_double_1(from.udi_double_1());
  }
  if (from.udi_double_2() != 0) {
    set_udi_double_2(from.udi_double_2());
  }
  if (from.udi_double_3() != 0) {
    set_udi_double_3(from.udi_double_3());
  }
  if (from.udi_double_4() != 0) {
    set_udi_double_4(from.udi_double_4());
  }
  if (from.udi_int_4() != 0) {
    set_udi_int_4(from.udi_int_4());
  }
  if (from.udi_bool_1() != 0) {
    set_udi_bool_1(from.udi_bool_1());
  }
  if (from.udi_bool_2() != 0) {
    set_udi_bool_2(from.udi_bool_2());
  }
  if (from.udi_bool_3() != 0) {
    set_udi_bool_3(from.udi_bool_3());
  }
  if (from.udi_bool_4() != 0) {
    set_udi_bool_4(from.udi_bool_4());
  }
}

void TerrainInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.TerrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerrainInfo::CopyFrom(const TerrainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.TerrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerrainInfo::IsInitialized() const {
  return true;
}

void TerrainInfo::Swap(TerrainInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TerrainInfo::InternalSwap(TerrainInfo* other) {
  using std::swap;
  swap(nearest_obstacle_dist_, other->nearest_obstacle_dist_);
  swap(udi_int_1_, other->udi_int_1_);
  swap(udi_int_2_, other->udi_int_2_);
  swap(udi_int_3_, other->udi_int_3_);
  swap(udi_double_1_, other->udi_double_1_);
  swap(udi_double_2_, other->udi_double_2_);
  swap(udi_double_3_, other->udi_double_3_);
  swap(udi_double_4_, other->udi_double_4_);
  swap(udi_int_4_, other->udi_int_4_);
  swap(udi_bool_1_, other->udi_bool_1_);
  swap(udi_bool_2_, other->udi_bool_2_);
  swap(udi_bool_3_, other->udi_bool_3_);
  swap(udi_bool_4_, other->udi_bool_4_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TerrainInfo::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInfo::kHpFieldNumber;
const int UInfo::kShieldFieldNumber;
const int UInfo::kEnergyFieldNumber;
const int UInfo::kCooldownFieldNumber;
const int UInfo::kPosXFieldNumber;
const int UInfo::kPosYFieldNumber;
const int UInfo::kVelocityXFieldNumber;
const int UInfo::kVelocityYFieldNumber;
const int UInfo::kAngleFieldNumber;
const int UInfo::kAcceleratingFieldNumber;
const int UInfo::kBrakingFieldNumber;
const int UInfo::kAttackingFieldNumber;
const int UInfo::kIsAttackFrameFieldNumber;
const int UInfo::kPosInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInfo::UInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_UInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.UInfo)
}
UInfo::UInfo(const UInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_info_(from.pos_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_attack_frame_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(is_attack_frame_));
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.UInfo)
}

void UInfo::SharedCtor() {
  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_attack_frame_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(is_attack_frame_));
}

UInfo::~UInfo() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.UInfo)
  SharedDtor();
}

void UInfo::SharedDtor() {
}

void UInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UInfo::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInfo& UInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_UInfo.base);
  return *internal_default_instance();
}


void UInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.UInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_info_.Clear();
  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_attack_frame_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(is_attack_frame_));
  _internal_metadata_.Clear();
}

bool UInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.UInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 hp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shield = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 energy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cooldown = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool accelerating = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accelerating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool braking = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &braking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool attacking = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_attack_frame = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Message.MarineScv.TerrainInfo pos_info = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pos_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.UInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.UInfo)
  return false;
#undef DO_
}

void UInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.UInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hp = 1;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  // int32 shield = 2;
  if (this->shield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shield(), output);
  }

  // int32 energy = 3;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->energy(), output);
  }

  // int32 cooldown = 4;
  if (this->cooldown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cooldown(), output);
  }

  // int32 pos_x = 5;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_x(), output);
  }

  // int32 pos_y = 6;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_y(), output);
  }

  // double velocity_x = 7;
  if (this->velocity_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->velocity_x(), output);
  }

  // double velocity_y = 8;
  if (this->velocity_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->velocity_y(), output);
  }

  // double angle = 9;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->angle(), output);
  }

  // bool accelerating = 10;
  if (this->accelerating() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->accelerating(), output);
  }

  // bool braking = 11;
  if (this->braking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->braking(), output);
  }

  // bool attacking = 12;
  if (this->attacking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->attacking(), output);
  }

  // bool is_attack_frame = 13;
  if (this->is_attack_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_attack_frame(), output);
  }

  // repeated .Message.MarineScv.TerrainInfo pos_info = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pos_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->pos_info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.UInfo)
}

::google::protobuf::uint8* UInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.UInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hp = 1;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  // int32 shield = 2;
  if (this->shield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shield(), target);
  }

  // int32 energy = 3;
  if (this->energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->energy(), target);
  }

  // int32 cooldown = 4;
  if (this->cooldown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cooldown(), target);
  }

  // int32 pos_x = 5;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_x(), target);
  }

  // int32 pos_y = 6;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_y(), target);
  }

  // double velocity_x = 7;
  if (this->velocity_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->velocity_x(), target);
  }

  // double velocity_y = 8;
  if (this->velocity_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->velocity_y(), target);
  }

  // double angle = 9;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->angle(), target);
  }

  // bool accelerating = 10;
  if (this->accelerating() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->accelerating(), target);
  }

  // bool braking = 11;
  if (this->braking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->braking(), target);
  }

  // bool attacking = 12;
  if (this->attacking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->attacking(), target);
  }

  // bool is_attack_frame = 13;
  if (this->is_attack_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_attack_frame(), target);
  }

  // repeated .Message.MarineScv.TerrainInfo pos_info = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pos_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->pos_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.UInfo)
  return target;
}

size_t UInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.UInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Message.MarineScv.TerrainInfo pos_info = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->pos_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pos_info(static_cast<int>(i)));
    }
  }

  // int32 hp = 1;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  // int32 shield = 2;
  if (this->shield() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shield());
  }

  // int32 energy = 3;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->energy());
  }

  // int32 cooldown = 4;
  if (this->cooldown() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cooldown());
  }

  // int32 pos_x = 5;
  if (this->pos_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());
  }

  // int32 pos_y = 6;
  if (this->pos_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());
  }

  // double velocity_x = 7;
  if (this->velocity_x() != 0) {
    total_size += 1 + 8;
  }

  // double velocity_y = 8;
  if (this->velocity_y() != 0) {
    total_size += 1 + 8;
  }

  // double angle = 9;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  // bool accelerating = 10;
  if (this->accelerating() != 0) {
    total_size += 1 + 1;
  }

  // bool braking = 11;
  if (this->braking() != 0) {
    total_size += 1 + 1;
  }

  // bool attacking = 12;
  if (this->attacking() != 0) {
    total_size += 1 + 1;
  }

  // bool is_attack_frame = 13;
  if (this->is_attack_frame() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.UInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.UInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.UInfo)
    MergeFrom(*source);
  }
}

void UInfo::MergeFrom(const UInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.UInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_info_.MergeFrom(from.pos_info_);
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.shield() != 0) {
    set_shield(from.shield());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
  if (from.cooldown() != 0) {
    set_cooldown(from.cooldown());
  }
  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.velocity_x() != 0) {
    set_velocity_x(from.velocity_x());
  }
  if (from.velocity_y() != 0) {
    set_velocity_y(from.velocity_y());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.accelerating() != 0) {
    set_accelerating(from.accelerating());
  }
  if (from.braking() != 0) {
    set_braking(from.braking());
  }
  if (from.attacking() != 0) {
    set_attacking(from.attacking());
  }
  if (from.is_attack_frame() != 0) {
    set_is_attack_frame(from.is_attack_frame());
  }
}

void UInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.UInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInfo::CopyFrom(const UInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.UInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInfo::IsInitialized() const {
  return true;
}

void UInfo::Swap(UInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInfo::InternalSwap(UInfo* other) {
  using std::swap;
  CastToBase(&pos_info_)->InternalSwap(CastToBase(&other->pos_info_));
  swap(hp_, other->hp_);
  swap(shield_, other->shield_);
  swap(energy_, other->energy_);
  swap(cooldown_, other->cooldown_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(velocity_x_, other->velocity_x_);
  swap(velocity_y_, other->velocity_y_);
  swap(angle_, other->angle_);
  swap(accelerating_, other->accelerating_);
  swap(braking_, other->braking_);
  swap(attacking_, other->attacking_);
  swap(is_attack_frame_, other->is_attack_frame_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UInfo::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Action::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kPosXFieldNumber;
const int Action::kPosYFieldNumber;
const int Action::kRadiusFieldNumber;
const int Action::kAngleFieldNumber;
const int Action::kActionNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_Action.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_x_, &from.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_num_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(action_num_));
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.Action)
}

void Action::SharedCtor() {
  ::memset(&pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_num_) -
      reinterpret_cast<char*>(&pos_x_)) + sizeof(action_num_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.Action)
  SharedDtor();
}

void Action::SharedDtor() {
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Action& Action::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_Action.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_num_) -
      reinterpret_cast<char*>(&pos_x_)) + sizeof(action_num_));
  _internal_metadata_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.Action)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pos_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos_x = 1;
  if (this->pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_x(), output);
  }

  // int32 pos_y = 2;
  if (this->pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_y(), output);
  }

  // int32 radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->radius(), output);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }

  // int32 action_num = 5;
  if (this->action_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos_x = 1;
  if (this->pos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos_x(), target);
  }

  // int32 pos_y = 2;
  if (this->pos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_y(), target);
  }

  // int32 radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->radius(), target);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
  }

  // int32 action_num = 5;
  if (this->action_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.Action)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 pos_x = 1;
  if (this->pos_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());
  }

  // int32 pos_y = 2;
  if (this->pos_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());
  }

  // int32 radius = 3;
  if (this->radius() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radius());
  }

  // float angle = 4;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // int32 action_num = 5;
  if (this->action_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pos_x() != 0) {
    set_pos_x(from.pos_x());
  }
  if (from.pos_y() != 0) {
    set_pos_y(from.pos_y());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.action_num() != 0) {
    set_action_num(from.action_num());
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(radius_, other->radius_);
  swap(angle_, other->angle_);
  swap(action_num_, other->action_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InitReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitReq::kContentFieldNumber;
const int InitReq::kActionTypeFieldNumber;
const int InitReq::kVersionFieldNumber;
const int InitReq::kFramesPerStepFieldNumber;
const int InitReq::kMoveAngleFieldNumber;
const int InitReq::kMoveDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitReq::InitReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_InitReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.InitReq)
}
InitReq::InitReq(const InitReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&action_type_, &from.action_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_dist_) -
    reinterpret_cast<char*>(&action_type_)) + sizeof(move_dist_));
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.InitReq)
}

void InitReq::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_dist_) -
      reinterpret_cast<char*>(&action_type_)) + sizeof(move_dist_));
}

InitReq::~InitReq() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.InitReq)
  SharedDtor();
}

void InitReq::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InitReq::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitReq& InitReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_InitReq.base);
  return *internal_default_instance();
}


void InitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.InitReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_dist_) -
      reinterpret_cast<char*>(&action_type_)) + sizeof(move_dist_));
  _internal_metadata_.Clear();
}

bool InitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.InitReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Message.MarineScv.InitReq.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_per_step = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_per_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 move_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 move_dist = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.InitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.InitReq)
  return false;
#undef DO_
}

void InitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.InitReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.InitReq.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // int32 action_type = 2;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_type(), output);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // int32 frames_per_step = 4;
  if (this->frames_per_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frames_per_step(), output);
  }

  // int32 move_angle = 5;
  if (this->move_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->move_angle(), output);
  }

  // int32 move_dist = 6;
  if (this->move_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->move_dist(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.InitReq)
}

::google::protobuf::uint8* InitReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.InitReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.InitReq.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // int32 action_type = 2;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_type(), target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // int32 frames_per_step = 4;
  if (this->frames_per_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frames_per_step(), target);
  }

  // int32 move_angle = 5;
  if (this->move_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->move_angle(), target);
  }

  // int32 move_dist = 6;
  if (this->move_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->move_dist(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.InitReq)
  return target;
}

size_t InitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.InitReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // int32 action_type = 2;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_type());
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // int32 frames_per_step = 4;
  if (this->frames_per_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_per_step());
  }

  // int32 move_angle = 5;
  if (this->move_angle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_angle());
  }

  // int32 move_dist = 6;
  if (this->move_dist() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_dist());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.InitReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InitReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.InitReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.InitReq)
    MergeFrom(*source);
  }
}

void InitReq::MergeFrom(const InitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.InitReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.frames_per_step() != 0) {
    set_frames_per_step(from.frames_per_step());
  }
  if (from.move_angle() != 0) {
    set_move_angle(from.move_angle());
  }
  if (from.move_dist() != 0) {
    set_move_dist(from.move_dist());
  }
}

void InitReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.InitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitReq::CopyFrom(const InitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.InitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitReq::IsInitialized() const {
  return true;
}

void InitReq::Swap(InitReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitReq::InternalSwap(InitReq* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_type_, other->action_type_);
  swap(version_, other->version_);
  swap(frames_per_step_, other->frames_per_step_);
  swap(move_angle_, other->move_angle_);
  swap(move_dist_, other->move_dist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InitReq::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InitRes::InitAsDefaultInstance() {
  ::Message::MarineScv::_InitRes_default_instance_._instance.get_mutable()->my_marine_type_ = const_cast< ::Message::MarineScv::TypeInfo*>(
      ::Message::MarineScv::TypeInfo::internal_default_instance());
  ::Message::MarineScv::_InitRes_default_instance_._instance.get_mutable()->my_scv_type_ = const_cast< ::Message::MarineScv::TypeInfo*>(
      ::Message::MarineScv::TypeInfo::internal_default_instance());
  ::Message::MarineScv::_InitRes_default_instance_._instance.get_mutable()->en_unit_type_ = const_cast< ::Message::MarineScv::TypeInfo*>(
      ::Message::MarineScv::TypeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRes::kNumActionSpaceFieldNumber;
const int InitRes::kMyMarineTypeFieldNumber;
const int InitRes::kMyScvTypeFieldNumber;
const int InitRes::kEnUnitTypeFieldNumber;
const int InitRes::kIswalkableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRes::InitRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_InitRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.InitRes)
}
InitRes::InitRes(const InitRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      iswalkable_(from.iswalkable_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_my_marine_type()) {
    my_marine_type_ = new ::Message::MarineScv::TypeInfo(*from.my_marine_type_);
  } else {
    my_marine_type_ = NULL;
  }
  if (from.has_my_scv_type()) {
    my_scv_type_ = new ::Message::MarineScv::TypeInfo(*from.my_scv_type_);
  } else {
    my_scv_type_ = NULL;
  }
  if (from.has_en_unit_type()) {
    en_unit_type_ = new ::Message::MarineScv::TypeInfo(*from.en_unit_type_);
  } else {
    en_unit_type_ = NULL;
  }
  num_action_space_ = from.num_action_space_;
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.InitRes)
}

void InitRes::SharedCtor() {
  ::memset(&my_marine_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_action_space_) -
      reinterpret_cast<char*>(&my_marine_type_)) + sizeof(num_action_space_));
}

InitRes::~InitRes() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.InitRes)
  SharedDtor();
}

void InitRes::SharedDtor() {
  if (this != internal_default_instance()) delete my_marine_type_;
  if (this != internal_default_instance()) delete my_scv_type_;
  if (this != internal_default_instance()) delete en_unit_type_;
}

void InitRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InitRes::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitRes& InitRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_InitRes.base);
  return *internal_default_instance();
}


void InitRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.InitRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iswalkable_.Clear();
  if (GetArenaNoVirtual() == NULL && my_marine_type_ != NULL) {
    delete my_marine_type_;
  }
  my_marine_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && my_scv_type_ != NULL) {
    delete my_scv_type_;
  }
  my_scv_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && en_unit_type_ != NULL) {
    delete en_unit_type_;
  }
  en_unit_type_ = NULL;
  num_action_space_ = 0;
  _internal_metadata_.Clear();
}

bool InitRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.InitRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_action_space = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_action_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Message.MarineScv.TypeInfo my_marine_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_my_marine_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Message.MarineScv.TypeInfo my_scv_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_my_scv_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Message.MarineScv.TypeInfo en_unit_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_en_unit_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool iswalkable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_iswalkable())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 42u, input, this->mutable_iswalkable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.InitRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.InitRes)
  return false;
#undef DO_
}

void InitRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.InitRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_action_space = 1;
  if (this->num_action_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_action_space(), output);
  }

  // .Message.MarineScv.TypeInfo my_marine_type = 2;
  if (this->has_my_marine_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_my_marine_type(), output);
  }

  // .Message.MarineScv.TypeInfo my_scv_type = 3;
  if (this->has_my_scv_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_my_scv_type(), output);
  }

  // .Message.MarineScv.TypeInfo en_unit_type = 4;
  if (this->has_en_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_en_unit_type(), output);
  }

  // repeated bool iswalkable = 5;
  if (this->iswalkable_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _iswalkable_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->iswalkable().data(), this->iswalkable_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.InitRes)
}

::google::protobuf::uint8* InitRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.InitRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_action_space = 1;
  if (this->num_action_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_action_space(), target);
  }

  // .Message.MarineScv.TypeInfo my_marine_type = 2;
  if (this->has_my_marine_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_my_marine_type(), deterministic, target);
  }

  // .Message.MarineScv.TypeInfo my_scv_type = 3;
  if (this->has_my_scv_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_my_scv_type(), deterministic, target);
  }

  // .Message.MarineScv.TypeInfo en_unit_type = 4;
  if (this->has_en_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_en_unit_type(), deterministic, target);
  }

  // repeated bool iswalkable = 5;
  if (this->iswalkable_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _iswalkable_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->iswalkable_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.InitRes)
  return target;
}

size_t InitRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.InitRes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bool iswalkable = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->iswalkable_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _iswalkable_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .Message.MarineScv.TypeInfo my_marine_type = 2;
  if (this->has_my_marine_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *my_marine_type_);
  }

  // .Message.MarineScv.TypeInfo my_scv_type = 3;
  if (this->has_my_scv_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *my_scv_type_);
  }

  // .Message.MarineScv.TypeInfo en_unit_type = 4;
  if (this->has_en_unit_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *en_unit_type_);
  }

  // int32 num_action_space = 1;
  if (this->num_action_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_action_space());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.InitRes)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.InitRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.InitRes)
    MergeFrom(*source);
  }
}

void InitRes::MergeFrom(const InitRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.InitRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  iswalkable_.MergeFrom(from.iswalkable_);
  if (from.has_my_marine_type()) {
    mutable_my_marine_type()->::Message::MarineScv::TypeInfo::MergeFrom(from.my_marine_type());
  }
  if (from.has_my_scv_type()) {
    mutable_my_scv_type()->::Message::MarineScv::TypeInfo::MergeFrom(from.my_scv_type());
  }
  if (from.has_en_unit_type()) {
    mutable_en_unit_type()->::Message::MarineScv::TypeInfo::MergeFrom(from.en_unit_type());
  }
  if (from.num_action_space() != 0) {
    set_num_action_space(from.num_action_space());
  }
}

void InitRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.InitRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRes::CopyFrom(const InitRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.InitRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRes::IsInitialized() const {
  return true;
}

void InitRes::Swap(InitRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRes::InternalSwap(InitRes* other) {
  using std::swap;
  iswalkable_.InternalSwap(&other->iswalkable_);
  swap(my_marine_type_, other->my_marine_type_);
  swap(my_scv_type_, other->my_scv_type_);
  swap(en_unit_type_, other->en_unit_type_);
  swap(num_action_space_, other->num_action_space_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InitRes::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StepReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepReq::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepReq::StepReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_StepReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.StepReq)
}
StepReq::StepReq(const StepReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      action_(from.action_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.StepReq)
}

void StepReq::SharedCtor() {
}

StepReq::~StepReq() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.StepReq)
  SharedDtor();
}

void StepReq::SharedDtor() {
}

void StepReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StepReq::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepReq& StepReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_StepReq.base);
  return *internal_default_instance();
}


void StepReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.StepReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.Clear();
  _internal_metadata_.Clear();
}

bool StepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.StepReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.MarineScv.Action action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.StepReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.StepReq)
  return false;
#undef DO_
}

void StepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.StepReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message.MarineScv.Action action = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->action(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.StepReq)
}

::google::protobuf::uint8* StepReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.StepReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message.MarineScv.Action action = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->action(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.StepReq)
  return target;
}

size_t StepReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.StepReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Message.MarineScv.Action action = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->action_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->action(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.StepReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StepReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.StepReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.StepReq)
    MergeFrom(*source);
  }
}

void StepReq::MergeFrom(const StepReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.StepReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_.MergeFrom(from.action_);
}

void StepReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.StepReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepReq::CopyFrom(const StepReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.StepReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepReq::IsInitialized() const {
  return true;
}

void StepReq::Swap(StepReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepReq::InternalSwap(StepReq* other) {
  using std::swap;
  CastToBase(&action_)->InternalSwap(CastToBase(&other->action_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StepReq::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void State::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kMyMarineFieldNumber;
const int State::kMyScvFieldNumber;
const int State::kEnUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_State.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      my_marine_(from.my_marine_),
      my_scv_(from.my_scv_),
      en_unit_(from.en_unit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.State)
}

void State::SharedCtor() {
}

State::~State() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.State)
  SharedDtor();
}

void State::SharedDtor() {
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* State::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_State.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  my_marine_.Clear();
  my_scv_.Clear();
  en_unit_.Clear();
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.State)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.MarineScv.UInfo my_marine = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_my_marine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Message.MarineScv.UInfo my_scv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_my_scv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Message.MarineScv.UInfo en_unit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_en_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message.MarineScv.UInfo my_marine = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_marine_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->my_marine(static_cast<int>(i)),
      output);
  }

  // repeated .Message.MarineScv.UInfo my_scv = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_scv_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->my_scv(static_cast<int>(i)),
      output);
  }

  // repeated .Message.MarineScv.UInfo en_unit = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->en_unit_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->en_unit(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message.MarineScv.UInfo my_marine = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_marine_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->my_marine(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Message.MarineScv.UInfo my_scv = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_scv_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->my_scv(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Message.MarineScv.UInfo en_unit = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->en_unit_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->en_unit(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Message.MarineScv.UInfo my_marine = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->my_marine_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->my_marine(static_cast<int>(i)));
    }
  }

  // repeated .Message.MarineScv.UInfo my_scv = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->my_scv_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->my_scv(static_cast<int>(i)));
    }
  }

  // repeated .Message.MarineScv.UInfo en_unit = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->en_unit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->en_unit(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  my_marine_.MergeFrom(from.my_marine_);
  my_scv_.MergeFrom(from.my_scv_);
  en_unit_.MergeFrom(from.en_unit_);
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  CastToBase(&my_marine_)->InternalSwap(CastToBase(&other->my_marine_));
  CastToBase(&my_scv_)->InternalSwap(CastToBase(&other->my_scv_));
  CastToBase(&en_unit_)->InternalSwap(CastToBase(&other->en_unit_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StepRes::InitAsDefaultInstance() {
  ::Message::MarineScv::_StepRes_default_instance_._instance.get_mutable()->next_state_ = const_cast< ::Message::MarineScv::State*>(
      ::Message::MarineScv::State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepRes::kDoneFieldNumber;
const int StepRes::kRewardFieldNumber;
const int StepRes::kNextStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepRes::StepRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_StepRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.StepRes)
}
StepRes::StepRes(const StepRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_next_state()) {
    next_state_ = new ::Message::MarineScv::State(*from.next_state_);
  } else {
    next_state_ = NULL;
  }
  ::memcpy(&done_, &from.done_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&done_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.StepRes)
}

void StepRes::SharedCtor() {
  ::memset(&next_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&next_state_)) + sizeof(reward_));
}

StepRes::~StepRes() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.StepRes)
  SharedDtor();
}

void StepRes::SharedDtor() {
  if (this != internal_default_instance()) delete next_state_;
}

void StepRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StepRes::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepRes& StepRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_StepRes.base);
  return *internal_default_instance();
}


void StepRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.StepRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && next_state_ != NULL) {
    delete next_state_;
  }
  next_state_ = NULL;
  ::memset(&done_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&done_)) + sizeof(reward_));
  _internal_metadata_.Clear();
}

bool StepRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.StepRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 done = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Message.MarineScv.State next_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.StepRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.StepRes)
  return false;
#undef DO_
}

void StepRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.StepRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 done = 1;
  if (this->done() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->done(), output);
  }

  // float reward = 2;
  if (this->reward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->reward(), output);
  }

  // .Message.MarineScv.State next_state = 3;
  if (this->has_next_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_next_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.StepRes)
}

::google::protobuf::uint8* StepRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.StepRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 done = 1;
  if (this->done() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->done(), target);
  }

  // float reward = 2;
  if (this->reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->reward(), target);
  }

  // .Message.MarineScv.State next_state = 3;
  if (this->has_next_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_next_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.StepRes)
  return target;
}

size_t StepRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.StepRes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Message.MarineScv.State next_state = 3;
  if (this->has_next_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *next_state_);
  }

  // int32 done = 1;
  if (this->done() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->done());
  }

  // float reward = 2;
  if (this->reward() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.StepRes)
  GOOGLE_DCHECK_NE(&from, this);
  const StepRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.StepRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.StepRes)
    MergeFrom(*source);
  }
}

void StepRes::MergeFrom(const StepRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.StepRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_next_state()) {
    mutable_next_state()->::Message::MarineScv::State::MergeFrom(from.next_state());
  }
  if (from.done() != 0) {
    set_done(from.done());
  }
  if (from.reward() != 0) {
    set_reward(from.reward());
  }
}

void StepRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.StepRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepRes::CopyFrom(const StepRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.StepRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepRes::IsInitialized() const {
  return true;
}

void StepRes::Swap(StepRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepRes::InternalSwap(StepRes* other) {
  using std::swap;
  swap(next_state_, other->next_state_);
  swap(done_, other->done_);
  swap(reward_, other->reward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StepRes::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetReq::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetReq::ResetReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_ResetReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.ResetReq)
}
ResetReq::ResetReq(const ResetReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.ResetReq)
}

void ResetReq::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResetReq::~ResetReq() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.ResetReq)
  SharedDtor();
}

void ResetReq::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResetReq::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetReq& ResetReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_ResetReq.base);
  return *internal_default_instance();
}


void ResetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.ResetReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.ResetReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Message.MarineScv.ResetReq.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.ResetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.ResetReq)
  return false;
#undef DO_
}

void ResetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.ResetReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.ResetReq.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.ResetReq)
}

::google::protobuf::uint8* ResetReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.ResetReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.ResetReq.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.ResetReq)
  return target;
}

size_t ResetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.ResetReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.ResetReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.ResetReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.ResetReq)
    MergeFrom(*source);
  }
}

void ResetReq::MergeFrom(const ResetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.ResetReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ResetReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.ResetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetReq::CopyFrom(const ResetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.ResetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetReq::IsInitialized() const {
  return true;
}

void ResetReq::Swap(ResetReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetReq::InternalSwap(ResetReq* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResetReq::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetRes::InitAsDefaultInstance() {
  ::Message::MarineScv::_ResetRes_default_instance_._instance.get_mutable()->next_state_ = const_cast< ::Message::MarineScv::State*>(
      ::Message::MarineScv::State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetRes::kNextStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRes::ResetRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_ResetRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.ResetRes)
}
ResetRes::ResetRes(const ResetRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_next_state()) {
    next_state_ = new ::Message::MarineScv::State(*from.next_state_);
  } else {
    next_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.ResetRes)
}

void ResetRes::SharedCtor() {
  next_state_ = NULL;
}

ResetRes::~ResetRes() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.ResetRes)
  SharedDtor();
}

void ResetRes::SharedDtor() {
  if (this != internal_default_instance()) delete next_state_;
}

void ResetRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResetRes::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetRes& ResetRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_ResetRes.base);
  return *internal_default_instance();
}


void ResetRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.ResetRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && next_state_ != NULL) {
    delete next_state_;
  }
  next_state_ = NULL;
  _internal_metadata_.Clear();
}

bool ResetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.ResetRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Message.MarineScv.State next_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.ResetRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.ResetRes)
  return false;
#undef DO_
}

void ResetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.ResetRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Message.MarineScv.State next_state = 1;
  if (this->has_next_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_next_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.ResetRes)
}

::google::protobuf::uint8* ResetRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.ResetRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Message.MarineScv.State next_state = 1;
  if (this->has_next_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_next_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.ResetRes)
  return target;
}

size_t ResetRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.ResetRes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Message.MarineScv.State next_state = 1;
  if (this->has_next_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *next_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.ResetRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.ResetRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.ResetRes)
    MergeFrom(*source);
  }
}

void ResetRes::MergeFrom(const ResetRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.ResetRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_next_state()) {
    mutable_next_state()->::Message::MarineScv::State::MergeFrom(from.next_state());
  }
}

void ResetRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.ResetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRes::CopyFrom(const ResetRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.ResetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRes::IsInitialized() const {
  return true;
}

void ResetRes::Swap(ResetRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetRes::InternalSwap(ResetRes* other) {
  using std::swap;
  swap(next_state_, other->next_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResetRes::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Create::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Create::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Create::Create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_Create.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.Create)
}
Create::Create(const Create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.Create)
}

void Create::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Create::~Create() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.Create)
  SharedDtor();
}

void Create::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Create::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Create& Create::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_Create.base);
  return *internal_default_instance();
}


void Create::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.Create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Message.MarineScv.Create.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.Create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.Create)
  return false;
#undef DO_
}

void Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.Create.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.Create)
}

::google::protobuf::uint8* Create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.Create.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.Create)
  return target;
}

size_t Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.Create)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.Create)
  GOOGLE_DCHECK_NE(&from, this);
  const Create* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.Create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.Create)
    MergeFrom(*source);
  }
}

void Create::MergeFrom(const Create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.Create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void Create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Create::CopyFrom(const Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Create::IsInitialized() const {
  return true;
}

void Create::Swap(Create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Create::InternalSwap(Create* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Create::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Close::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Close::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Close::Close()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_marineScv_2eproto::scc_info_Close.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.MarineScv.Close)
}
Close::Close(const Close& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:Message.MarineScv.Close)
}

void Close::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Message.MarineScv.Close)
  SharedDtor();
}

void Close::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  ::protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Close& Close::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_marineScv_2eproto::scc_info_Close.base);
  return *internal_default_instance();
}


void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.MarineScv.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.MarineScv.Close)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Message.MarineScv.Close.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.MarineScv.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.MarineScv.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.MarineScv.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.Close.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.MarineScv.Close)
}

::google::protobuf::uint8* Close::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.MarineScv.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.MarineScv.Close.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.MarineScv.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.MarineScv.Close)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.MarineScv.Close)
  GOOGLE_DCHECK_NE(&from, this);
  const Close* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Close>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.MarineScv.Close)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.MarineScv.Close)
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.MarineScv.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.MarineScv.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.MarineScv.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::Swap(Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Close::InternalSwap(Close* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_marineScv_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_marineScv_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MarineScv
}  // namespace Message
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::TypeInfo* Arena::CreateMaybeMessage< ::Message::MarineScv::TypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::TypeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::TerrainInfo* Arena::CreateMaybeMessage< ::Message::MarineScv::TerrainInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::TerrainInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::UInfo* Arena::CreateMaybeMessage< ::Message::MarineScv::UInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::UInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::Action* Arena::CreateMaybeMessage< ::Message::MarineScv::Action >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::Action >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::InitReq* Arena::CreateMaybeMessage< ::Message::MarineScv::InitReq >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::InitReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::InitRes* Arena::CreateMaybeMessage< ::Message::MarineScv::InitRes >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::InitRes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::StepReq* Arena::CreateMaybeMessage< ::Message::MarineScv::StepReq >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::StepReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::State* Arena::CreateMaybeMessage< ::Message::MarineScv::State >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::State >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::StepRes* Arena::CreateMaybeMessage< ::Message::MarineScv::StepRes >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::StepRes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::ResetReq* Arena::CreateMaybeMessage< ::Message::MarineScv::ResetReq >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::ResetReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::ResetRes* Arena::CreateMaybeMessage< ::Message::MarineScv::ResetRes >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::ResetRes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::Create* Arena::CreateMaybeMessage< ::Message::MarineScv::Create >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::Create >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message::MarineScv::Close* Arena::CreateMaybeMessage< ::Message::MarineScv::Close >(Arena* arena) {
  return Arena::CreateInternal< ::Message::MarineScv::Close >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
