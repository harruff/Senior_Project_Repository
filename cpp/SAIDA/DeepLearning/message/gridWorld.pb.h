// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gridWorld.proto

#ifndef PROTOBUF_INCLUDED_gridWorld_2eproto
#define PROTOBUF_INCLUDED_gridWorld_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gridWorld_2eproto 

namespace protobuf_gridWorld_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gridWorld_2eproto
namespace Message {
namespace GridWorld {
class InitRes;
class InitResDefaultTypeInternal;
extern InitResDefaultTypeInternal _InitRes_default_instance_;
class RenderReq;
class RenderReqDefaultTypeInternal;
extern RenderReqDefaultTypeInternal _RenderReq_default_instance_;
class ResetRes;
class ResetResDefaultTypeInternal;
extern ResetResDefaultTypeInternal _ResetRes_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class StepRes;
class StepResDefaultTypeInternal;
extern StepResDefaultTypeInternal _StepRes_default_instance_;
}  // namespace GridWorld
}  // namespace Message
namespace google {
namespace protobuf {
template<> ::Message::GridWorld::InitRes* Arena::CreateMaybeMessage<::Message::GridWorld::InitRes>(Arena*);
template<> ::Message::GridWorld::RenderReq* Arena::CreateMaybeMessage<::Message::GridWorld::RenderReq>(Arena*);
template<> ::Message::GridWorld::ResetRes* Arena::CreateMaybeMessage<::Message::GridWorld::ResetRes>(Arena*);
template<> ::Message::GridWorld::State* Arena::CreateMaybeMessage<::Message::GridWorld::State>(Arena*);
template<> ::Message::GridWorld::StepRes* Arena::CreateMaybeMessage<::Message::GridWorld::StepRes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Message {
namespace GridWorld {

// ===================================================================

class InitRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.GridWorld.InitRes) */ {
 public:
  InitRes();
  virtual ~InitRes();

  InitRes(const InitRes& from);

  inline InitRes& operator=(const InitRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitRes(InitRes&& from) noexcept
    : InitRes() {
    *this = ::std::move(from);
  }

  inline InitRes& operator=(InitRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitRes* internal_default_instance() {
    return reinterpret_cast<const InitRes*>(
               &_InitRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InitRes* other);
  friend void swap(InitRes& a, InitRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitRes* New() const final {
    return CreateMaybeMessage<InitRes>(NULL);
  }

  InitRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitRes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitRes& from);
  void MergeFrom(const InitRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string map = 4;
  void clear_map();
  static const int kMapFieldNumber = 4;
  const ::std::string& map() const;
  void set_map(const ::std::string& value);
  #if LANG_CXX11
  void set_map(::std::string&& value);
  #endif
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  ::std::string* mutable_map();
  ::std::string* release_map();
  void set_allocated_map(::std::string* map);

  // int32 max_row = 1;
  void clear_max_row();
  static const int kMaxRowFieldNumber = 1;
  ::google::protobuf::int32 max_row() const;
  void set_max_row(::google::protobuf::int32 value);

  // int32 max_col = 2;
  void clear_max_col();
  static const int kMaxColFieldNumber = 2;
  ::google::protobuf::int32 max_col() const;
  void set_max_col(::google::protobuf::int32 value);

  // int32 num_action_space = 3;
  void clear_num_action_space();
  static const int kNumActionSpaceFieldNumber = 3;
  ::google::protobuf::int32 num_action_space() const;
  void set_num_action_space(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.GridWorld.InitRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr map_;
  ::google::protobuf::int32 max_row_;
  ::google::protobuf::int32 max_col_;
  ::google::protobuf::int32 num_action_space_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gridWorld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.GridWorld.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(NULL);
  }

  State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  const ::std::string& index() const;
  void set_index(const ::std::string& value);
  #if LANG_CXX11
  void set_index(::std::string&& value);
  #endif
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  ::std::string* mutable_index();
  ::std::string* release_index();
  void set_allocated_index(::std::string* index);

  // @@protoc_insertion_point(class_scope:Message.GridWorld.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gridWorld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StepRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.GridWorld.StepRes) */ {
 public:
  StepRes();
  virtual ~StepRes();

  StepRes(const StepRes& from);

  inline StepRes& operator=(const StepRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StepRes(StepRes&& from) noexcept
    : StepRes() {
    *this = ::std::move(from);
  }

  inline StepRes& operator=(StepRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StepRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepRes* internal_default_instance() {
    return reinterpret_cast<const StepRes*>(
               &_StepRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StepRes* other);
  friend void swap(StepRes& a, StepRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StepRes* New() const final {
    return CreateMaybeMessage<StepRes>(NULL);
  }

  StepRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StepRes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StepRes& from);
  void MergeFrom(const StepRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Message.GridWorld.State next_state = 3;
  bool has_next_state() const;
  void clear_next_state();
  static const int kNextStateFieldNumber = 3;
  private:
  const ::Message::GridWorld::State& _internal_next_state() const;
  public:
  const ::Message::GridWorld::State& next_state() const;
  ::Message::GridWorld::State* release_next_state();
  ::Message::GridWorld::State* mutable_next_state();
  void set_allocated_next_state(::Message::GridWorld::State* next_state);

  // int32 done = 1;
  void clear_done();
  static const int kDoneFieldNumber = 1;
  ::google::protobuf::int32 done() const;
  void set_done(::google::protobuf::int32 value);

  // float reward = 2;
  void clear_reward();
  static const int kRewardFieldNumber = 2;
  float reward() const;
  void set_reward(float value);

  // @@protoc_insertion_point(class_scope:Message.GridWorld.StepRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Message::GridWorld::State* next_state_;
  ::google::protobuf::int32 done_;
  float reward_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gridWorld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.GridWorld.ResetRes) */ {
 public:
  ResetRes();
  virtual ~ResetRes();

  ResetRes(const ResetRes& from);

  inline ResetRes& operator=(const ResetRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetRes(ResetRes&& from) noexcept
    : ResetRes() {
    *this = ::std::move(from);
  }

  inline ResetRes& operator=(ResetRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRes* internal_default_instance() {
    return reinterpret_cast<const ResetRes*>(
               &_ResetRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResetRes* other);
  friend void swap(ResetRes& a, ResetRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetRes* New() const final {
    return CreateMaybeMessage<ResetRes>(NULL);
  }

  ResetRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetRes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetRes& from);
  void MergeFrom(const ResetRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Message.GridWorld.State next_state = 1;
  bool has_next_state() const;
  void clear_next_state();
  static const int kNextStateFieldNumber = 1;
  private:
  const ::Message::GridWorld::State& _internal_next_state() const;
  public:
  const ::Message::GridWorld::State& next_state() const;
  ::Message::GridWorld::State* release_next_state();
  ::Message::GridWorld::State* mutable_next_state();
  void set_allocated_next_state(::Message::GridWorld::State* next_state);

  // @@protoc_insertion_point(class_scope:Message.GridWorld.ResetRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Message::GridWorld::State* next_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gridWorld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RenderReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.GridWorld.RenderReq) */ {
 public:
  RenderReq();
  virtual ~RenderReq();

  RenderReq(const RenderReq& from);

  inline RenderReq& operator=(const RenderReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenderReq(RenderReq&& from) noexcept
    : RenderReq() {
    *this = ::std::move(from);
  }

  inline RenderReq& operator=(RenderReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RenderReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenderReq* internal_default_instance() {
    return reinterpret_cast<const RenderReq*>(
               &_RenderReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RenderReq* other);
  friend void swap(RenderReq& a, RenderReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenderReq* New() const final {
    return CreateMaybeMessage<RenderReq>(NULL);
  }

  RenderReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RenderReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RenderReq& from);
  void MergeFrom(const RenderReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float q_table = 1;
  int q_table_size() const;
  void clear_q_table();
  static const int kQTableFieldNumber = 1;
  float q_table(int index) const;
  void set_q_table(int index, float value);
  void add_q_table(float value);
  const ::google::protobuf::RepeatedField< float >&
      q_table() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_q_table();

  // @@protoc_insertion_point(class_scope:Message.GridWorld.RenderReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > q_table_;
  mutable int _q_table_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gridWorld_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitRes

// int32 max_row = 1;
inline void InitRes::clear_max_row() {
  max_row_ = 0;
}
inline ::google::protobuf::int32 InitRes::max_row() const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.InitRes.max_row)
  return max_row_;
}
inline void InitRes::set_max_row(::google::protobuf::int32 value) {
  
  max_row_ = value;
  // @@protoc_insertion_point(field_set:Message.GridWorld.InitRes.max_row)
}

// int32 max_col = 2;
inline void InitRes::clear_max_col() {
  max_col_ = 0;
}
inline ::google::protobuf::int32 InitRes::max_col() const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.InitRes.max_col)
  return max_col_;
}
inline void InitRes::set_max_col(::google::protobuf::int32 value) {
  
  max_col_ = value;
  // @@protoc_insertion_point(field_set:Message.GridWorld.InitRes.max_col)
}

// int32 num_action_space = 3;
inline void InitRes::clear_num_action_space() {
  num_action_space_ = 0;
}
inline ::google::protobuf::int32 InitRes::num_action_space() const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.InitRes.num_action_space)
  return num_action_space_;
}
inline void InitRes::set_num_action_space(::google::protobuf::int32 value) {
  
  num_action_space_ = value;
  // @@protoc_insertion_point(field_set:Message.GridWorld.InitRes.num_action_space)
}

// string map = 4;
inline void InitRes::clear_map() {
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRes::map() const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.InitRes.map)
  return map_.GetNoArena();
}
inline void InitRes::set_map(const ::std::string& value) {
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.GridWorld.InitRes.map)
}
#if LANG_CXX11
inline void InitRes::set_map(::std::string&& value) {
  
  map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.GridWorld.InitRes.map)
}
#endif
inline void InitRes::set_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.GridWorld.InitRes.map)
}
inline void InitRes::set_map(const char* value, size_t size) {
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.GridWorld.InitRes.map)
}
inline ::std::string* InitRes::mutable_map() {
  
  // @@protoc_insertion_point(field_mutable:Message.GridWorld.InitRes.map)
  return map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRes::release_map() {
  // @@protoc_insertion_point(field_release:Message.GridWorld.InitRes.map)
  
  return map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRes::set_allocated_map(::std::string* map) {
  if (map != NULL) {
    
  } else {
    
  }
  map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:Message.GridWorld.InitRes.map)
}

// -------------------------------------------------------------------

// State

// string index = 1;
inline void State::clear_index() {
  index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& State::index() const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.State.index)
  return index_.GetNoArena();
}
inline void State::set_index(const ::std::string& value) {
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.GridWorld.State.index)
}
#if LANG_CXX11
inline void State::set_index(::std::string&& value) {
  
  index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.GridWorld.State.index)
}
#endif
inline void State::set_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.GridWorld.State.index)
}
inline void State::set_index(const char* value, size_t size) {
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.GridWorld.State.index)
}
inline ::std::string* State::mutable_index() {
  
  // @@protoc_insertion_point(field_mutable:Message.GridWorld.State.index)
  return index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* State::release_index() {
  // @@protoc_insertion_point(field_release:Message.GridWorld.State.index)
  
  return index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_index(::std::string* index) {
  if (index != NULL) {
    
  } else {
    
  }
  index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index);
  // @@protoc_insertion_point(field_set_allocated:Message.GridWorld.State.index)
}

// -------------------------------------------------------------------

// StepRes

// int32 done = 1;
inline void StepRes::clear_done() {
  done_ = 0;
}
inline ::google::protobuf::int32 StepRes::done() const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.StepRes.done)
  return done_;
}
inline void StepRes::set_done(::google::protobuf::int32 value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:Message.GridWorld.StepRes.done)
}

// float reward = 2;
inline void StepRes::clear_reward() {
  reward_ = 0;
}
inline float StepRes::reward() const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.StepRes.reward)
  return reward_;
}
inline void StepRes::set_reward(float value) {
  
  reward_ = value;
  // @@protoc_insertion_point(field_set:Message.GridWorld.StepRes.reward)
}

// .Message.GridWorld.State next_state = 3;
inline bool StepRes::has_next_state() const {
  return this != internal_default_instance() && next_state_ != NULL;
}
inline void StepRes::clear_next_state() {
  if (GetArenaNoVirtual() == NULL && next_state_ != NULL) {
    delete next_state_;
  }
  next_state_ = NULL;
}
inline const ::Message::GridWorld::State& StepRes::_internal_next_state() const {
  return *next_state_;
}
inline const ::Message::GridWorld::State& StepRes::next_state() const {
  const ::Message::GridWorld::State* p = next_state_;
  // @@protoc_insertion_point(field_get:Message.GridWorld.StepRes.next_state)
  return p != NULL ? *p : *reinterpret_cast<const ::Message::GridWorld::State*>(
      &::Message::GridWorld::_State_default_instance_);
}
inline ::Message::GridWorld::State* StepRes::release_next_state() {
  // @@protoc_insertion_point(field_release:Message.GridWorld.StepRes.next_state)
  
  ::Message::GridWorld::State* temp = next_state_;
  next_state_ = NULL;
  return temp;
}
inline ::Message::GridWorld::State* StepRes::mutable_next_state() {
  
  if (next_state_ == NULL) {
    auto* p = CreateMaybeMessage<::Message::GridWorld::State>(GetArenaNoVirtual());
    next_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Message.GridWorld.StepRes.next_state)
  return next_state_;
}
inline void StepRes::set_allocated_next_state(::Message::GridWorld::State* next_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete next_state_;
  }
  if (next_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      next_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_state, submessage_arena);
    }
    
  } else {
    
  }
  next_state_ = next_state;
  // @@protoc_insertion_point(field_set_allocated:Message.GridWorld.StepRes.next_state)
}

// -------------------------------------------------------------------

// ResetRes

// .Message.GridWorld.State next_state = 1;
inline bool ResetRes::has_next_state() const {
  return this != internal_default_instance() && next_state_ != NULL;
}
inline void ResetRes::clear_next_state() {
  if (GetArenaNoVirtual() == NULL && next_state_ != NULL) {
    delete next_state_;
  }
  next_state_ = NULL;
}
inline const ::Message::GridWorld::State& ResetRes::_internal_next_state() const {
  return *next_state_;
}
inline const ::Message::GridWorld::State& ResetRes::next_state() const {
  const ::Message::GridWorld::State* p = next_state_;
  // @@protoc_insertion_point(field_get:Message.GridWorld.ResetRes.next_state)
  return p != NULL ? *p : *reinterpret_cast<const ::Message::GridWorld::State*>(
      &::Message::GridWorld::_State_default_instance_);
}
inline ::Message::GridWorld::State* ResetRes::release_next_state() {
  // @@protoc_insertion_point(field_release:Message.GridWorld.ResetRes.next_state)
  
  ::Message::GridWorld::State* temp = next_state_;
  next_state_ = NULL;
  return temp;
}
inline ::Message::GridWorld::State* ResetRes::mutable_next_state() {
  
  if (next_state_ == NULL) {
    auto* p = CreateMaybeMessage<::Message::GridWorld::State>(GetArenaNoVirtual());
    next_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Message.GridWorld.ResetRes.next_state)
  return next_state_;
}
inline void ResetRes::set_allocated_next_state(::Message::GridWorld::State* next_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete next_state_;
  }
  if (next_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      next_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_state, submessage_arena);
    }
    
  } else {
    
  }
  next_state_ = next_state;
  // @@protoc_insertion_point(field_set_allocated:Message.GridWorld.ResetRes.next_state)
}

// -------------------------------------------------------------------

// RenderReq

// repeated float q_table = 1;
inline int RenderReq::q_table_size() const {
  return q_table_.size();
}
inline void RenderReq::clear_q_table() {
  q_table_.Clear();
}
inline float RenderReq::q_table(int index) const {
  // @@protoc_insertion_point(field_get:Message.GridWorld.RenderReq.q_table)
  return q_table_.Get(index);
}
inline void RenderReq::set_q_table(int index, float value) {
  q_table_.Set(index, value);
  // @@protoc_insertion_point(field_set:Message.GridWorld.RenderReq.q_table)
}
inline void RenderReq::add_q_table(float value) {
  q_table_.Add(value);
  // @@protoc_insertion_point(field_add:Message.GridWorld.RenderReq.q_table)
}
inline const ::google::protobuf::RepeatedField< float >&
RenderReq::q_table() const {
  // @@protoc_insertion_point(field_list:Message.GridWorld.RenderReq.q_table)
  return q_table_;
}
inline ::google::protobuf::RepeatedField< float >*
RenderReq::mutable_q_table() {
  // @@protoc_insertion_point(field_mutable_list:Message.GridWorld.RenderReq.q_table)
  return &q_table_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GridWorld
}  // namespace Message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gridWorld_2eproto
